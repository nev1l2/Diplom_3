{"name": "Показ заказов клиента", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (906, 130). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\n  (Session info: chrome=132.0.6834.83)\nStacktrace:\n0   chromedriver                        0x0000000100a4f7a4 cxxbridge1$str$ptr + 2589716\n1   chromedriver                        0x0000000100a4805c cxxbridge1$str$ptr + 2559180\n2   chromedriver                        0x00000001005ebf5c cxxbridge1$string$len + 88260\n3   chromedriver                        0x0000000100636954 cxxbridge1$string$len + 393916\n4   chromedriver                        0x0000000100634f30 cxxbridge1$string$len + 387224\n5   chromedriver                        0x0000000100632e0c cxxbridge1$string$len + 378740\n6   chromedriver                        0x000000010063227c cxxbridge1$string$len + 375780\n7   chromedriver                        0x0000000100626e10 cxxbridge1$string$len + 329592\n8   chromedriver                        0x00000001006268b4 cxxbridge1$string$len + 328220\n9   chromedriver                        0x000000010066b1a8 cxxbridge1$string$len + 609040\n10  chromedriver                        0x0000000100624e40 cxxbridge1$string$len + 321448\n11  chromedriver                        0x0000000100625a88 cxxbridge1$string$len + 324592\n12  chromedriver                        0x0000000100a1a8a0 cxxbridge1$str$ptr + 2372880\n13  chromedriver                        0x0000000100a1dbc4 cxxbridge1$str$ptr + 2385972\n14  chromedriver                        0x0000000100a016e0 cxxbridge1$str$ptr + 2270032\n15  chromedriver                        0x0000000100a1e484 cxxbridge1$str$ptr + 2388212\n16  chromedriver                        0x00000001009f3324 cxxbridge1$str$ptr + 2211732\n17  chromedriver                        0x0000000100a390a0 cxxbridge1$str$ptr + 2497808\n18  chromedriver                        0x0000000100a3921c cxxbridge1$str$ptr + 2498188\n19  chromedriver                        0x0000000100a47cd0 cxxbridge1$str$ptr + 2558272\n20  libsystem_pthread.dylib             0x0000000192865f94 _pthread_start + 136\n21  libsystem_pthread.dylib             0x0000000192860d34 thread_start + 8", "trace": "main_page = <pages.main_page.MainPage object at 0x106d07c50>\n\n    @allure.title('Формирование заказа')\n    @pytest.fixture()\n    def create_order(main_page):\n        main_page.add_ingredient_to_order(1)\n        main_page.add_ingredient_to_order(4)\n        main_page.click_place_order_button()\n>       main_page.click_cross_button_in_popup_window()\n\nconftest.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/main_page.py:25: in click_cross_button_in_popup_window\n    self.click_element(MainPageLocators.CLOSE_POPUP_WINDOW_BUTTON)\npages/base_page.py:24: in click_element\n    WebDriverWait(self.driver, timeout).until(expected_conditions.element_to_be_clickable(locator)).click()\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:384: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x106bf62c0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...000192865f94 _pthread_start + 136\\\\n21  libsystem_pthread.dylib             0x0000000192860d34 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button type=\"button\" class=\"Modal_modal__close_modified__3V5XS Modal_modal__close__TnseK\">...</button> is not clickable at point (906, 130). Other element would receive the click: <div class=\"Modal_modal_overlay__x2ZCr\"></div>\nE         (Session info: chrome=132.0.6834.83)\nE       Stacktrace:\nE       0   chromedriver                        0x0000000100a4f7a4 cxxbridge1$str$ptr + 2589716\nE       1   chromedriver                        0x0000000100a4805c cxxbridge1$str$ptr + 2559180\nE       2   chromedriver                        0x00000001005ebf5c cxxbridge1$string$len + 88260\nE       3   chromedriver                        0x0000000100636954 cxxbridge1$string$len + 393916\nE       4   chromedriver                        0x0000000100634f30 cxxbridge1$string$len + 387224\nE       5   chromedriver                        0x0000000100632e0c cxxbridge1$string$len + 378740\nE       6   chromedriver                        0x000000010063227c cxxbridge1$string$len + 375780\nE       7   chromedriver                        0x0000000100626e10 cxxbridge1$string$len + 329592\nE       8   chromedriver                        0x00000001006268b4 cxxbridge1$string$len + 328220\nE       9   chromedriver                        0x000000010066b1a8 cxxbridge1$string$len + 609040\nE       10  chromedriver                        0x0000000100624e40 cxxbridge1$string$len + 321448\nE       11  chromedriver                        0x0000000100625a88 cxxbridge1$string$len + 324592\nE       12  chromedriver                        0x0000000100a1a8a0 cxxbridge1$str$ptr + 2372880\nE       13  chromedriver                        0x0000000100a1dbc4 cxxbridge1$str$ptr + 2385972\nE       14  chromedriver                        0x0000000100a016e0 cxxbridge1$str$ptr + 2270032\nE       15  chromedriver                        0x0000000100a1e484 cxxbridge1$str$ptr + 2388212\nE       16  chromedriver                        0x00000001009f3324 cxxbridge1$str$ptr + 2211732\nE       17  chromedriver                        0x0000000100a390a0 cxxbridge1$str$ptr + 2497808\nE       18  chromedriver                        0x0000000100a3921c cxxbridge1$str$ptr + 2498188\nE       19  chromedriver                        0x0000000100a47cd0 cxxbridge1$str$ptr + 2558272\nE       20  libsystem_pthread.dylib             0x0000000192865f94 _pthread_start + 136\nE       21  libsystem_pthread.dylib             0x0000000192860d34 thread_start + 8\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException"}, "description": "Проверка наличия заказов клиента из раздела «История заказов» на странице «Лента заказов»", "parameters": [{"name": "driver", "value": "'Chrome'"}], "start": 1737137289313, "stop": 1737137289313, "uuid": "98652277-8d18-44b7-ba7c-a6b7f7bec8c0", "historyId": "d4c22dd243d28faeb70c9dd53828e247", "testCaseId": "e57630ef40b4700df37eaa068a59a501", "fullName": "tests.tests_order_feed_page.TestOrderFeedPage#test_user_orders_display", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "tests_order_feed_page"}, {"name": "subSuite", "value": "TestOrderFeedPage"}, {"name": "host", "value": "MacBook-Pro.local"}, {"name": "thread", "value": "69732-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.tests_order_feed_page"}]}